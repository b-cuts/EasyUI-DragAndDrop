'use strict';

var util = {
  isPathTopmostDirectoryName: function isPathTopmostDirectoryName(path) {
    var pathTopmostDirectoryName = util.topmostDirectoryName(path);

    pathTopmostDirectoryName = pathTopmostDirectoryName === null; ///

    return pathTopmostDirectoryName;
  },

  bottommostName: function bottommostName(path) {
    var bottommostName = null,
        matches = path.match(/^.*\/([^\/]*$)/);

    if (matches !== null) {
      var secondMatch = second(matches);

      bottommostName = secondMatch; ///
    }

    return bottommostName;
  },

  topmostDirectoryName: function topmostDirectoryName(path) {
    var topmostDirectoryName = null,
        matches = path.match(/^([^\/]*)\//);

    if (matches !== null) {
      var secondMatch = second(matches);

      topmostDirectoryName = secondMatch; ///
    }

    return topmostDirectoryName;
  },

  pathWithoutBottommostName: function pathWithoutBottommostName(path) {
    var pathWithoutBottommostName = null,
        matches = path.match(/(^.*)\/[^\/]*$/);

    if (matches !== null) {
      var secondMatch = second(matches);

      pathWithoutBottommostName = secondMatch; ///
    }

    return pathWithoutBottommostName;
  },

  pathWithoutTopmostDirectoryName: function pathWithoutTopmostDirectoryName(path) {
    var pathWithoutTopmostDirectoryName = null,
        matches = path.match(/^[^\/]*\/(.*$)/);

    if (matches !== null) {
      var secondMatch = second(matches);

      pathWithoutTopmostDirectoryName = secondMatch;
    }

    return pathWithoutTopmostDirectoryName;
  },

  replaceSourcePathWithTargetPath: function replaceSourcePathWithTargetPath(path, sourcePath, targetPath) {
    var regExp = new RegExp('^' + sourcePath + '(.*$)'),
        matches = path.match(regExp),
        secondMatch = second(matches);

    path = targetPath + secondMatch; ///

    return path;
  }
};

module.exports = util;

function second(array) {
  return array[1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi91dGlsLmpzIl0sIm5hbWVzIjpbInV0aWwiLCJpc1BhdGhUb3Btb3N0RGlyZWN0b3J5TmFtZSIsInBhdGgiLCJwYXRoVG9wbW9zdERpcmVjdG9yeU5hbWUiLCJ0b3Btb3N0RGlyZWN0b3J5TmFtZSIsImJvdHRvbW1vc3ROYW1lIiwibWF0Y2hlcyIsIm1hdGNoIiwic2Vjb25kTWF0Y2giLCJzZWNvbmQiLCJwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lIiwicGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZSIsInJlcGxhY2VTb3VyY2VQYXRoV2l0aFRhcmdldFBhdGgiLCJzb3VyY2VQYXRoIiwidGFyZ2V0UGF0aCIsInJlZ0V4cCIsIlJlZ0V4cCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcnJheSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsT0FBTztBQUNUQyw4QkFBNEIsb0NBQVNDLElBQVQsRUFBZTtBQUN6QyxRQUFJQywyQkFBMkJILEtBQUtJLG9CQUFMLENBQTBCRixJQUExQixDQUEvQjs7QUFFQUMsK0JBQTRCQSw2QkFBNkIsSUFBekQsQ0FIeUMsQ0FHdUI7O0FBRWhFLFdBQU9BLHdCQUFQO0FBQ0QsR0FQUTs7QUFTVEUsa0JBQWdCLHdCQUFTSCxJQUFULEVBQWU7QUFDN0IsUUFBSUcsaUJBQWlCLElBQXJCO0FBQUEsUUFDSUMsVUFBVUosS0FBS0ssS0FBTCxDQUFXLGdCQUFYLENBRGQ7O0FBR0EsUUFBSUQsWUFBWSxJQUFoQixFQUFzQjtBQUNwQixVQUFJRSxjQUFjQyxPQUFPSCxPQUFQLENBQWxCOztBQUVBRCx1QkFBaUJHLFdBQWpCLENBSG9CLENBR1c7QUFDaEM7O0FBRUQsV0FBT0gsY0FBUDtBQUNELEdBcEJROztBQXNCVEQsd0JBQXNCLDhCQUFTRixJQUFULEVBQWU7QUFDbkMsUUFBSUUsdUJBQXVCLElBQTNCO0FBQUEsUUFDSUUsVUFBVUosS0FBS0ssS0FBTCxDQUFXLGFBQVgsQ0FEZDs7QUFHQSxRQUFJRCxZQUFZLElBQWhCLEVBQXNCO0FBQ3BCLFVBQUlFLGNBQWNDLE9BQU9ILE9BQVAsQ0FBbEI7O0FBRUFGLDZCQUF1QkksV0FBdkIsQ0FIb0IsQ0FHaUI7QUFDdEM7O0FBRUQsV0FBT0osb0JBQVA7QUFDRCxHQWpDUTs7QUFtQ1RNLDZCQUEyQixtQ0FBU1IsSUFBVCxFQUFlO0FBQ3hDLFFBQUlRLDRCQUE0QixJQUFoQztBQUFBLFFBQ0lKLFVBQVVKLEtBQUtLLEtBQUwsQ0FBVyxnQkFBWCxDQURkOztBQUdBLFFBQUlELFlBQVksSUFBaEIsRUFBc0I7QUFDcEIsVUFBSUUsY0FBY0MsT0FBT0gsT0FBUCxDQUFsQjs7QUFFQUksa0NBQTRCRixXQUE1QixDQUhvQixDQUdxQjtBQUMxQzs7QUFFRCxXQUFPRSx5QkFBUDtBQUNELEdBOUNROztBQWdEVEMsbUNBQWlDLHlDQUFTVCxJQUFULEVBQWU7QUFDOUMsUUFBSVMsa0NBQWtDLElBQXRDO0FBQUEsUUFDSUwsVUFBVUosS0FBS0ssS0FBTCxDQUFXLGdCQUFYLENBRGQ7O0FBR0EsUUFBSUQsWUFBWSxJQUFoQixFQUFzQjtBQUNwQixVQUFJRSxjQUFjQyxPQUFPSCxPQUFQLENBQWxCOztBQUVBSyx3Q0FBa0NILFdBQWxDO0FBQ0Q7O0FBRUQsV0FBT0csK0JBQVA7QUFDRCxHQTNEUTs7QUE2RFRDLG1DQUFpQyx5Q0FBU1YsSUFBVCxFQUFlVyxVQUFmLEVBQTJCQyxVQUEzQixFQUF1QztBQUN0RSxRQUFJQyxTQUFTLElBQUlDLE1BQUosQ0FBVyxNQUFNSCxVQUFOLEdBQW1CLE9BQTlCLENBQWI7QUFBQSxRQUNJUCxVQUFVSixLQUFLSyxLQUFMLENBQVdRLE1BQVgsQ0FEZDtBQUFBLFFBRUlQLGNBQWNDLE9BQU9ILE9BQVAsQ0FGbEI7O0FBSUFKLFdBQU9ZLGFBQWFOLFdBQXBCLENBTHNFLENBS3JDOztBQUVqQyxXQUFPTixJQUFQO0FBQ0Q7QUFyRVEsQ0FBWDs7QUF3RUFlLE9BQU9DLE9BQVAsR0FBaUJsQixJQUFqQjs7QUFFQSxTQUFTUyxNQUFULENBQWdCVSxLQUFoQixFQUF1QjtBQUFFLFNBQU9BLE1BQU0sQ0FBTixDQUFQO0FBQWtCIiwiZmlsZSI6InV0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0ge1xuICBpc1BhdGhUb3Btb3N0RGlyZWN0b3J5TmFtZTogZnVuY3Rpb24ocGF0aCkge1xuICAgIHZhciBwYXRoVG9wbW9zdERpcmVjdG9yeU5hbWUgPSB1dGlsLnRvcG1vc3REaXJlY3RvcnlOYW1lKHBhdGgpO1xuXG4gICAgcGF0aFRvcG1vc3REaXJlY3RvcnlOYW1lID0gKHBhdGhUb3Btb3N0RGlyZWN0b3J5TmFtZSA9PT0gbnVsbCk7IC8vL1xuXG4gICAgcmV0dXJuIHBhdGhUb3Btb3N0RGlyZWN0b3J5TmFtZTtcbiAgfSxcblxuICBib3R0b21tb3N0TmFtZTogZnVuY3Rpb24ocGF0aCkge1xuICAgIHZhciBib3R0b21tb3N0TmFtZSA9IG51bGwsXG4gICAgICAgIG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eLipcXC8oW15cXC9dKiQpLyk7XG4gICAgXG4gICAgaWYgKG1hdGNoZXMgIT09IG51bGwpIHtcbiAgICAgIHZhciBzZWNvbmRNYXRjaCA9IHNlY29uZChtYXRjaGVzKTtcbiAgICAgIFxuICAgICAgYm90dG9tbW9zdE5hbWUgPSBzZWNvbmRNYXRjaDsgIC8vL1xuICAgIH1cblxuICAgIHJldHVybiBib3R0b21tb3N0TmFtZTtcbiAgfSxcblxuICB0b3Btb3N0RGlyZWN0b3J5TmFtZTogZnVuY3Rpb24ocGF0aCkge1xuICAgIHZhciB0b3Btb3N0RGlyZWN0b3J5TmFtZSA9IG51bGwsXG4gICAgICAgIG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eKFteXFwvXSopXFwvLyk7XG5cbiAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgdmFyIHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgICB0b3Btb3N0RGlyZWN0b3J5TmFtZSA9IHNlY29uZE1hdGNoOyAgLy8vXG4gICAgfVxuXG4gICAgcmV0dXJuIHRvcG1vc3REaXJlY3RvcnlOYW1lO1xuICB9LFxuXG4gIHBhdGhXaXRob3V0Qm90dG9tbW9zdE5hbWU6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB2YXIgcGF0aFdpdGhvdXRCb3R0b21tb3N0TmFtZSA9IG51bGwsXG4gICAgICAgIG1hdGNoZXMgPSBwYXRoLm1hdGNoKC8oXi4qKVxcL1teXFwvXSokLyk7XG5cbiAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgdmFyIHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgICBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lID0gc2Vjb25kTWF0Y2g7IC8vL1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoV2l0aG91dEJvdHRvbW1vc3ROYW1lO1xuICB9LFxuXG4gIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWU6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB2YXIgcGF0aFdpdGhvdXRUb3Btb3N0RGlyZWN0b3J5TmFtZSA9IG51bGwsXG4gICAgICAgIG1hdGNoZXMgPSBwYXRoLm1hdGNoKC9eW15cXC9dKlxcLyguKiQpLyk7XG5cbiAgICBpZiAobWF0Y2hlcyAhPT0gbnVsbCkge1xuICAgICAgdmFyIHNlY29uZE1hdGNoID0gc2Vjb25kKG1hdGNoZXMpO1xuXG4gICAgICBwYXRoV2l0aG91dFRvcG1vc3REaXJlY3RvcnlOYW1lID0gc2Vjb25kTWF0Y2g7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhXaXRob3V0VG9wbW9zdERpcmVjdG9yeU5hbWU7XG4gIH0sXG5cbiAgcmVwbGFjZVNvdXJjZVBhdGhXaXRoVGFyZ2V0UGF0aDogZnVuY3Rpb24ocGF0aCwgc291cmNlUGF0aCwgdGFyZ2V0UGF0aCkge1xuICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZVBhdGggKyAnKC4qJCknKSxcbiAgICAgICAgbWF0Y2hlcyA9IHBhdGgubWF0Y2gocmVnRXhwKSxcbiAgICAgICAgc2Vjb25kTWF0Y2ggPSBzZWNvbmQobWF0Y2hlcyk7XG5cbiAgICBwYXRoID0gdGFyZ2V0UGF0aCArIHNlY29uZE1hdGNoOyAvLy9cblxuICAgIHJldHVybiBwYXRoO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWw7XG5cbmZ1bmN0aW9uIHNlY29uZChhcnJheSkgeyByZXR1cm4gYXJyYXlbMV07IH1cbiJdfQ==